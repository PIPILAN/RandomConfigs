buildscript {
	repositories {
		jcenter()

		mavenCentral()

		maven {
			url "http://files.minecraftforge.net/maven"
		}
	}

	dependencies {
		classpath group: "net.minecraftforge.gradle", name: "ForgeGradle", version: "3.+", changing: true
		//classpath "com.github.jengelman.gradle.plugins:shadow:2.0.0"
	}
}

apply plugin: "net.minecraftforge.gradle"
//apply plugin: "com.github.johnrengelman.shadow"

version = "1.13.2-1.3.2.3"
group = "com.therandomlabs.randomconfigs"
archivesBaseName = "randomconfigs"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = "1.8"

minecraft {
	mappings channel: "snapshot", version: "20180921-1.13"

	accessTransformer = file("src/main/resources/META-INF/accesstransformer.cfg")

	runs {
		client {
			workingDirectory project.file("run")

			property "forge.logging.markers", "SCAN,REGISTRIES,REGISTRYDUMP"
			property "forge.logging.console.level", "debug"

			mods {
				randomconfigs {
					source sourceSets.main
				}
			}
		}

		server {
			workingDirectory project.file("run")

			property "forge.logging.markers", "SCAN,REGISTRIES,REGISTRYDUMP"
			property "forge.logging.console.level", "debug"

			mods {
				randomconfigs {
					source sourceSets.main
				}
			}
		}
	}
}

repositories {
	mavenCentral()
}

configurations {
	shade
	compile.extendsFrom shade
}

dependencies {
	minecraft "net.minecraftforge:forge:1.13.2-25.0.110"
	shade "blue.endless:jankson:1.1.0"
}

//shadowJar {
//	classifier = ""
//	relocate "blue.endless.jankson", "com.therandomlabs.randomconfigs.repackage.blue.endless.jankson"
//	configurations = [project.configurations.shadow]
//}

//build.dependsOn shadowJar

//artifacts {
//	archives shadowJar
//}

jar {
	manifest {
		attributes([
			"Specification-Title": "randomconfigs",
			"Specification-Vendor": "TheRandomLabs",
			"Specification-Version": "1",
			"Implementation-Title": "RandomConfigs",
			"Implementation-Version": "${version}",
			"Implementation-Vendor": "TheRandomLabs",
			"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
    }

	configurations.shade.each { dep ->
		from(project.zipTree(dep)){
			exclude "META-INF", 'META-INF/**'
		}
	}
}

import net.minecraftforge.gradle.common.task.SignJar

task signJar(type: SignJar, dependsOn: jar) {
	onlyIf {
		project.hasProperty("keyStore")
	}

	keyStore = project.findProperty("keyStore")
	alias = project.findProperty("keyStoreAlias")
	storePass = project.findProperty("keyStorePass")
	keyPass = project.findProperty("keyStoreKeyPass")
	inputFile = jar.archivePath
	outputFile = jar.archivePath
}

build.dependsOn signJar
